<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="2784767"><g><title>AppKit`-[NSApplication(NSEventRouting) sendEvent:] (351 samples, 0.01%)</title><rect x="0.0024%" y="581" width="0.0126%" height="15" fill="rgb(227,0,7)" fg:x="67" fg:w="351"/><text x="0.2524%" y="591.50"></text></g><g><title>comic-dl-tauri`tao::platform_impl::platform::app::send_event (371 samples, 0.01%)</title><rect x="0.0024%" y="597" width="0.0133%" height="15" fill="rgb(217,0,24)" fg:x="66" fg:w="371"/><text x="0.2524%" y="607.50"></text></g><g><title>AppKit`-[NSApplication _handleEvent:] (387 samples, 0.01%)</title><rect x="0.0020%" y="613" width="0.0139%" height="15" fill="rgb(221,193,54)" fg:x="55" fg:w="387"/><text x="0.2520%" y="623.50"></text></g><g><title>QuartzCore`0x7ff80c6a601d (284 samples, 0.01%)</title><rect x="0.0257%" y="469" width="0.0102%" height="15" fill="rgb(248,212,6)" fg:x="716" fg:w="284"/><text x="0.2757%" y="479.50"></text></g><g><title>QuartzCore`0x7ff80c8979be (303 samples, 0.01%)</title><rect x="0.0255%" y="485" width="0.0109%" height="15" fill="rgb(208,68,35)" fg:x="711" fg:w="303"/><text x="0.2755%" y="495.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (309 samples, 0.01%)</title><rect x="0.0254%" y="501" width="0.0111%" height="15" fill="rgb(232,128,0)" fg:x="708" fg:w="309"/><text x="0.2754%" y="511.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (321 samples, 0.01%)</title><rect x="0.0253%" y="517" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="704" fg:w="321"/><text x="0.2753%" y="527.50"></text></g><g><title>WebKit`0x7ff908a6bef7 (346 samples, 0.01%)</title><rect x="0.0500%" y="405" width="0.0124%" height="15" fill="rgb(228,23,34)" fg:x="1391" fg:w="346"/><text x="0.3000%" y="415.50"></text></g><g><title>WebKit`0x7ff9086766ff (346 samples, 0.01%)</title><rect x="0.0500%" y="389" width="0.0124%" height="15" fill="rgb(218,30,26)" fg:x="1391" fg:w="346"/><text x="0.3000%" y="399.50"></text></g><g><title>WebKit`0x7ff908a70413 (343 samples, 0.01%)</title><rect x="0.0501%" y="373" width="0.0123%" height="15" fill="rgb(220,122,19)" fg:x="1394" fg:w="343"/><text x="0.3001%" y="383.50"></text></g><g><title>WebKit`0x7ff908a6c25c (356 samples, 0.01%)</title><rect x="0.0499%" y="421" width="0.0128%" height="15" fill="rgb(250,228,42)" fg:x="1389" fg:w="356"/><text x="0.2999%" y="431.50"></text></g><g><title>JavaScriptCore`WTF::RunLoop::performWork (383 samples, 0.01%)</title><rect x="0.0490%" y="453" width="0.0138%" height="15" fill="rgb(240,193,28)" fg:x="1365" fg:w="383"/><text x="0.2990%" y="463.50"></text></g><g><title>JavaScriptCore`WTF::RunLoop::performWork (381 samples, 0.01%)</title><rect x="0.0491%" y="437" width="0.0137%" height="15" fill="rgb(216,20,37)" fg:x="1367" fg:w="381"/><text x="0.2991%" y="447.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoSources0 (403 samples, 0.01%)</title><rect x="0.0484%" y="501" width="0.0145%" height="15" fill="rgb(206,188,39)" fg:x="1347" fg:w="403"/><text x="0.2984%" y="511.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoSource0 (385 samples, 0.01%)</title><rect x="0.0490%" y="485" width="0.0138%" height="15" fill="rgb(217,207,13)" fg:x="1365" fg:w="385"/><text x="0.2990%" y="495.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ (385 samples, 0.01%)</title><rect x="0.0490%" y="469" width="0.0138%" height="15" fill="rgb(231,73,38)" fg:x="1365" fg:w="385"/><text x="0.2990%" y="479.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (960 samples, 0.03%)</title><rect x="0.0370%" y="517" width="0.0345%" height="15" fill="rgb(225,20,46)" fg:x="1030" fg:w="960"/><text x="0.2870%" y="527.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (1,314 samples, 0.05%)</title><rect x="0.0247%" y="533" width="0.0472%" height="15" fill="rgb(210,31,41)" fg:x="689" fg:w="1314"/><text x="0.2747%" y="543.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (1,381 samples, 0.05%)</title><rect x="0.0246%" y="549" width="0.0496%" height="15" fill="rgb(221,200,47)" fg:x="686" fg:w="1381"/><text x="0.2746%" y="559.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (1,452 samples, 0.05%)</title><rect x="0.0240%" y="565" width="0.0521%" height="15" fill="rgb(226,26,5)" fg:x="667" fg:w="1452"/><text x="0.2740%" y="575.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (1,456 samples, 0.05%)</title><rect x="0.0238%" y="581" width="0.0523%" height="15" fill="rgb(249,33,26)" fg:x="664" fg:w="1456"/><text x="0.2738%" y="591.50"></text></g><g><title>AppKit`_DPSNextEvent (1,595 samples, 0.06%)</title><rect x="0.0189%" y="597" width="0.0573%" height="15" fill="rgb(235,183,28)" fg:x="526" fg:w="1595"/><text x="0.2689%" y="607.50"></text></g><g><title>AppKit`-[NSApplication(NSEventRouting) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (1,762 samples, 0.06%)</title><rect x="0.0159%" y="613" width="0.0633%" height="15" fill="rgb(221,5,38)" fg:x="444" fg:w="1762"/><text x="0.2659%" y="623.50"></text></g><g><title>AppKit`-[NSApplication run] (2,185 samples, 0.08%)</title><rect x="0.0020%" y="629" width="0.0785%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="2185"/><text x="0.2520%" y="639.50"></text></g><g><title>comic-dl-tauri`tao::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run (2,196 samples, 0.08%)</title><rect x="0.0020%" y="645" width="0.0789%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="2196"/><text x="0.2520%" y="655.50"></text></g><g><title>dyld`start (2,228 samples, 0.08%)</title><rect x="0.0009%" y="757" width="0.0800%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="767.50"></text></g><g><title>comic-dl-tauri`main (2,228 samples, 0.08%)</title><rect x="0.0009%" y="741" width="0.0800%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="751.50"></text></g><g><title>comic-dl-tauri`std::rt::lang_start_internal (2,228 samples, 0.08%)</title><rect x="0.0009%" y="725" width="0.0800%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="735.50"></text></g><g><title>comic-dl-tauri`std::rt::lang_start::_{{closure}} (2,228 samples, 0.08%)</title><rect x="0.0009%" y="709" width="0.0800%" height="15" fill="rgb(214,148,48)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="719.50"></text></g><g><title>comic-dl-tauri`std::sys::backtrace::__rust_begin_short_backtrace (2,228 samples, 0.08%)</title><rect x="0.0009%" y="693" width="0.0800%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="703.50"></text></g><g><title>comic-dl-tauri`comic_dl_tauri_lib::run (2,228 samples, 0.08%)</title><rect x="0.0009%" y="677" width="0.0800%" height="15" fill="rgb(209,103,24)" fg:x="24" fg:w="2228"/><text x="0.2509%" y="687.50"></text></g><g><title>comic-dl-tauri`tauri::app::Builder&lt;R&gt;::run (2,227 samples, 0.08%)</title><rect x="0.0009%" y="661" width="0.0800%" height="15" fill="rgb(229,88,8)" fg:x="25" fg:w="2227"/><text x="0.2509%" y="671.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (504 samples, 0.02%)</title><rect x="0.0813%" y="757" width="0.0181%" height="15" fill="rgb(213,181,19)" fg:x="2264" fg:w="504"/><text x="0.3313%" y="767.50"></text></g><g><title>SkyLight`0x7ff809ab4d3a (339 samples, 0.01%)</title><rect x="0.1040%" y="581" width="0.0122%" height="15" fill="rgb(254,191,54)" fg:x="2895" fg:w="339"/><text x="0.3540%" y="591.50"></text></g><g><title>SkyLight`0x7ff80987b6db (427 samples, 0.02%)</title><rect x="0.1031%" y="597" width="0.0153%" height="15" fill="rgb(241,83,37)" fg:x="2872" fg:w="427"/><text x="0.3531%" y="607.50"></text></g><g><title>HIToolbox`PullEventsFromWindowServerOnConnection(unsigned int, unsigned char, __CFMachPortBoost*) (500 samples, 0.02%)</title><rect x="0.1007%" y="613" width="0.0180%" height="15" fill="rgb(233,36,39)" fg:x="2804" fg:w="500"/><text x="0.3507%" y="623.50"></text></g><g><title>CoreFoundation`__CFMachPortPerform (515 samples, 0.02%)</title><rect x="0.1002%" y="645" width="0.0185%" height="15" fill="rgb(226,3,54)" fg:x="2790" fg:w="515"/><text x="0.3502%" y="655.50"></text></g><g><title>HIToolbox`MessageHandler(__CFMachPort*, void*, long, void*) (505 samples, 0.02%)</title><rect x="0.1005%" y="629" width="0.0181%" height="15" fill="rgb(245,192,40)" fg:x="2800" fg:w="505"/><text x="0.3505%" y="639.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoSource1 (520 samples, 0.02%)</title><rect x="0.1001%" y="677" width="0.0187%" height="15" fill="rgb(238,167,29)" fg:x="2788" fg:w="520"/><text x="0.3501%" y="687.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ (518 samples, 0.02%)</title><rect x="0.1002%" y="661" width="0.0186%" height="15" fill="rgb(232,182,51)" fg:x="2790" fg:w="518"/><text x="0.3502%" y="671.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (681 samples, 0.02%)</title><rect x="0.0998%" y="693" width="0.0245%" height="15" fill="rgb(231,60,39)" fg:x="2779" fg:w="681"/><text x="0.3498%" y="703.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (688 samples, 0.02%)</title><rect x="0.0997%" y="709" width="0.0247%" height="15" fill="rgb(208,69,12)" fg:x="2777" fg:w="688"/><text x="0.3497%" y="719.50"></text></g><g><title>AppKit`_NSEventThread (692 samples, 0.02%)</title><rect x="0.0996%" y="725" width="0.0248%" height="15" fill="rgb(235,93,37)" fg:x="2774" fg:w="692"/><text x="0.3496%" y="735.50"></text></g><g><title>libsystem_info.dylib`0x7ff804118f91 (440 samples, 0.02%)</title><rect x="0.1319%" y="565" width="0.0158%" height="15" fill="rgb(213,116,39)" fg:x="3674" fg:w="440"/><text x="0.3819%" y="575.50"></text></g><g><title>libsystem_info.dylib`0x7ff80412061a (520 samples, 0.02%)</title><rect x="0.1485%" y="533" width="0.0187%" height="15" fill="rgb(222,207,29)" fg:x="4135" fg:w="520"/><text x="0.3985%" y="543.50"></text></g><g><title>libsystem_info.dylib`0x7ff804119300 (529 samples, 0.02%)</title><rect x="0.1485%" y="565" width="0.0190%" height="15" fill="rgb(206,96,30)" fg:x="4135" fg:w="529"/><text x="0.3985%" y="575.50"></text></g><g><title>libsystem_info.dylib`0x7ff8041203ff (529 samples, 0.02%)</title><rect x="0.1485%" y="549" width="0.0190%" height="15" fill="rgb(218,138,4)" fg:x="4135" fg:w="529"/><text x="0.3985%" y="559.50"></text></g><g><title>Network`0x7ff80b90d263 (289 samples, 0.01%)</title><rect x="0.1678%" y="533" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="4672" fg:w="289"/><text x="0.4178%" y="543.50"></text></g><g><title>libsystem_info.dylib`0x7ff804119327 (339 samples, 0.01%)</title><rect x="0.1675%" y="565" width="0.0122%" height="15" fill="rgb(239,60,40)" fg:x="4664" fg:w="339"/><text x="0.4175%" y="575.50"></text></g><g><title>libsystem_info.dylib`0x7ff80412c9c6 (339 samples, 0.01%)</title><rect x="0.1675%" y="549" width="0.0122%" height="15" fill="rgb(206,27,48)" fg:x="4664" fg:w="339"/><text x="0.4175%" y="559.50"></text></g><g><title>libsystem_info.dylib`0x7ff804118d4d (1,330 samples, 0.05%)</title><rect x="0.1319%" y="581" width="0.0478%" height="15" fill="rgb(225,35,8)" fg:x="3674" fg:w="1330"/><text x="0.3819%" y="591.50"></text></g><g><title>comic-dl-tauri`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (1,334 samples, 0.05%)</title><rect x="0.1319%" y="597" width="0.0479%" height="15" fill="rgb(250,213,24)" fg:x="3673" fg:w="1334"/><text x="0.3819%" y="607.50"></text></g><g><title>comic-dl-tauri`&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1,340 samples, 0.05%)</title><rect x="0.1319%" y="613" width="0.0481%" height="15" fill="rgb(247,123,22)" fg:x="3673" fg:w="1340"/><text x="0.3819%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (420 samples, 0.02%)</title><rect x="0.1953%" y="517" width="0.0151%" height="15" fill="rgb(231,138,38)" fg:x="5440" fg:w="420"/><text x="0.4453%" y="527.50"></text></g><g><title>comic-dl-tauri`parking_lot::condvar::Condvar::wait_until_internal (474 samples, 0.02%)</title><rect x="0.1945%" y="533" width="0.0170%" height="15" fill="rgb(231,145,46)" fg:x="5416" fg:w="474"/><text x="0.4445%" y="543.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::io::scheduled_io::ScheduledIo::wake (341 samples, 0.01%)</title><rect x="0.2183%" y="501" width="0.0122%" height="15" fill="rgb(251,118,11)" fg:x="6080" fg:w="341"/><text x="0.4683%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1,282 samples, 0.05%)</title><rect x="0.2310%" y="501" width="0.0460%" height="15" fill="rgb(217,147,25)" fg:x="6434" fg:w="1282"/><text x="0.4810%" y="511.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::io::driver::Driver::turn (1,746 samples, 0.06%)</title><rect x="0.2145%" y="517" width="0.0627%" height="15" fill="rgb(247,81,37)" fg:x="5972" fg:w="1746"/><text x="0.4645%" y="527.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_sharded_time (304 samples, 0.01%)</title><rect x="0.2815%" y="501" width="0.0109%" height="15" fill="rgb(209,12,38)" fg:x="7840" fg:w="304"/><text x="0.5315%" y="511.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process (442 samples, 0.02%)</title><rect x="0.2773%" y="517" width="0.0159%" height="15" fill="rgb(227,1,9)" fg:x="7722" fg:w="442"/><text x="0.5273%" y="527.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::time::Driver::park_internal (2,343 samples, 0.08%)</title><rect x="0.2122%" y="533" width="0.0841%" height="15" fill="rgb(248,47,43)" fg:x="5910" fg:w="2343"/><text x="0.4622%" y="543.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::scheduler::multi_thread::park::Parker::park (2,885 samples, 0.10%)</title><rect x="0.1933%" y="549" width="0.1036%" height="15" fill="rgb(221,10,30)" fg:x="5383" fg:w="2885"/><text x="0.4433%" y="559.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (2,965 samples, 0.11%)</title><rect x="0.1922%" y="565" width="0.1065%" height="15" fill="rgb(210,229,1)" fg:x="5352" fg:w="2965"/><text x="0.4422%" y="575.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::client::legacy::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (388 samples, 0.01%)</title><rect x="0.3095%" y="277" width="0.0139%" height="15" fill="rgb(222,148,37)" fg:x="8619" fg:w="388"/><text x="0.5595%" y="287.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e905be (458 samples, 0.02%)</title><rect x="0.3267%" y="69" width="0.0164%" height="15" fill="rgb(234,67,33)" fg:x="9099" fg:w="458"/><text x="0.5767%" y="79.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ebe15c (605 samples, 0.02%)</title><rect x="0.3245%" y="85" width="0.0217%" height="15" fill="rgb(247,98,35)" fg:x="9036" fg:w="605"/><text x="0.5745%" y="95.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea2db3 (628 samples, 0.02%)</title><rect x="0.3242%" y="117" width="0.0226%" height="15" fill="rgb(247,138,52)" fg:x="9028" fg:w="628"/><text x="0.5742%" y="127.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e76a92 (621 samples, 0.02%)</title><rect x="0.3244%" y="101" width="0.0223%" height="15" fill="rgb(213,79,30)" fg:x="9035" fg:w="621"/><text x="0.5744%" y="111.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e905be (429 samples, 0.02%)</title><rect x="0.3500%" y="53" width="0.0154%" height="15" fill="rgb(246,177,23)" fg:x="9747" fg:w="429"/><text x="0.6000%" y="63.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e86bf9 (581 samples, 0.02%)</title><rect x="0.3469%" y="69" width="0.0209%" height="15" fill="rgb(230,62,27)" fg:x="9661" fg:w="581"/><text x="0.5969%" y="79.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803eb0dc9 (638 samples, 0.02%)</title><rect x="0.3468%" y="101" width="0.0229%" height="15" fill="rgb(216,154,8)" fg:x="9657" fg:w="638"/><text x="0.5968%" y="111.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e86f75 (634 samples, 0.02%)</title><rect x="0.3469%" y="85" width="0.0228%" height="15" fill="rgb(244,35,45)" fg:x="9661" fg:w="634"/><text x="0.5969%" y="95.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea6a9c (285 samples, 0.01%)</title><rect x="0.3724%" y="53" width="0.0102%" height="15" fill="rgb(251,115,12)" fg:x="10371" fg:w="285"/><text x="0.6224%" y="63.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea70ab (514 samples, 0.02%)</title><rect x="0.3712%" y="69" width="0.0185%" height="15" fill="rgb(240,54,50)" fg:x="10338" fg:w="514"/><text x="0.6212%" y="79.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803eb0df2 (575 samples, 0.02%)</title><rect x="0.3697%" y="101" width="0.0206%" height="15" fill="rgb(233,84,52)" fg:x="10295" fg:w="575"/><text x="0.6197%" y="111.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea72bb (575 samples, 0.02%)</title><rect x="0.3697%" y="85" width="0.0206%" height="15" fill="rgb(207,117,47)" fg:x="10295" fg:w="575"/><text x="0.6197%" y="95.50"></text></g><g><title>libcoretls.dylib`0x7ff8103ddbf2 (1,845 samples, 0.07%)</title><rect x="0.3241%" y="165" width="0.0663%" height="15" fill="rgb(249,43,39)" fg:x="9026" fg:w="1845"/><text x="0.5741%" y="175.50"></text></g><g><title>libcoretls.dylib`0x7ff8103de12f (1,844 samples, 0.07%)</title><rect x="0.3242%" y="149" width="0.0662%" height="15" fill="rgb(209,38,44)" fg:x="9027" fg:w="1844"/><text x="0.5742%" y="159.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e56716 (1,843 samples, 0.07%)</title><rect x="0.3242%" y="133" width="0.0662%" height="15" fill="rgb(236,212,23)" fg:x="9028" fg:w="1843"/><text x="0.5742%" y="143.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea2dc5 (1,215 samples, 0.04%)</title><rect x="0.3467%" y="117" width="0.0436%" height="15" fill="rgb(242,79,21)" fg:x="9656" fg:w="1215"/><text x="0.5967%" y="127.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e905be (463 samples, 0.02%)</title><rect x="0.3929%" y="117" width="0.0166%" height="15" fill="rgb(211,96,35)" fg:x="10942" fg:w="463"/><text x="0.6429%" y="127.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e6ba95 (582 samples, 0.02%)</title><rect x="0.3906%" y="133" width="0.0209%" height="15" fill="rgb(253,215,40)" fg:x="10877" fg:w="582"/><text x="0.6406%" y="143.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e57f72 (595 samples, 0.02%)</title><rect x="0.3905%" y="149" width="0.0214%" height="15" fill="rgb(211,81,21)" fg:x="10874" fg:w="595"/><text x="0.6405%" y="159.50"></text></g><g><title>libcoretls.dylib`0x7ff8103ddc21 (599 samples, 0.02%)</title><rect x="0.3904%" y="165" width="0.0215%" height="15" fill="rgb(208,190,38)" fg:x="10871" fg:w="599"/><text x="0.6404%" y="175.50"></text></g><g><title>libcoretls.dylib`0x7ff8103d9020 (2,446 samples, 0.09%)</title><rect x="0.3241%" y="181" width="0.0878%" height="15" fill="rgb(235,213,38)" fg:x="9025" fg:w="2446"/><text x="0.5741%" y="191.50"></text></g><g><title>Security`0x7ff806d03a63 (2,490 samples, 0.09%)</title><rect x="0.3239%" y="213" width="0.0894%" height="15" fill="rgb(237,122,38)" fg:x="9020" fg:w="2490"/><text x="0.5739%" y="223.50"></text></g><g><title>libcoretls.dylib`0x7ff8103db422 (2,488 samples, 0.09%)</title><rect x="0.3240%" y="197" width="0.0893%" height="15" fill="rgb(244,218,35)" fg:x="9022" fg:w="2488"/><text x="0.5740%" y="207.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea6a9c (405 samples, 0.01%)</title><rect x="0.4306%" y="37" width="0.0145%" height="15" fill="rgb(240,68,47)" fg:x="11991" fg:w="405"/><text x="0.6806%" y="47.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea70ab (644 samples, 0.02%)</title><rect x="0.4296%" y="53" width="0.0231%" height="15" fill="rgb(210,16,53)" fg:x="11964" fg:w="644"/><text x="0.6796%" y="63.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ed4fcc (732 samples, 0.03%)</title><rect x="0.4270%" y="101" width="0.0263%" height="15" fill="rgb(235,124,12)" fg:x="11891" fg:w="732"/><text x="0.6770%" y="111.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ed5096 (728 samples, 0.03%)</title><rect x="0.4271%" y="85" width="0.0261%" height="15" fill="rgb(224,169,11)" fg:x="11895" fg:w="728"/><text x="0.6771%" y="95.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803ea72bb (727 samples, 0.03%)</title><rect x="0.4272%" y="69" width="0.0261%" height="15" fill="rgb(250,166,2)" fg:x="11896" fg:w="727"/><text x="0.6772%" y="79.50"></text></g><g><title>libcorecrypto.dylib`0x7ff803e57664 (737 samples, 0.03%)</title><rect x="0.4270%" y="117" width="0.0265%" height="15" fill="rgb(242,216,29)" fg:x="11890" fg:w="737"/><text x="0.6770%" y="127.50"></text></g><g><title>libcoretls.dylib`0x7ff8103dd712 (741 samples, 0.03%)</title><rect x="0.4269%" y="149" width="0.0266%" height="15" fill="rgb(230,116,27)" fg:x="11888" fg:w="741"/><text x="0.6769%" y="159.50"></text></g><g><title>libcoretls.dylib`0x7ff8103e2e6c (740 samples, 0.03%)</title><rect x="0.4269%" y="133" width="0.0266%" height="15" fill="rgb(228,99,48)" fg:x="11889" fg:w="740"/><text x="0.6769%" y="143.50"></text></g><g><title>libcoretls.dylib`0x7ff8103dc231 (798 samples, 0.03%)</title><rect x="0.4249%" y="181" width="0.0287%" height="15" fill="rgb(253,11,6)" fg:x="11833" fg:w="798"/><text x="0.6749%" y="191.50"></text></g><g><title>libcoretls.dylib`0x7ff8103dc52e (750 samples, 0.03%)</title><rect x="0.4266%" y="165" width="0.0269%" height="15" fill="rgb(247,143,39)" fg:x="11881" fg:w="750"/><text x="0.6766%" y="175.50"></text></g><g><title>Security`0x7ff806f68bef (826 samples, 0.03%)</title><rect x="0.4585%" y="165" width="0.0297%" height="15" fill="rgb(236,97,10)" fg:x="12767" fg:w="826"/><text x="0.7085%" y="175.50"></text></g><g><title>libcoretls.dylib`0x7ff8103dc280 (1,012 samples, 0.04%)</title><rect x="0.4585%" y="181" width="0.0363%" height="15" fill="rgb(233,208,19)" fg:x="12767" fg:w="1012"/><text x="0.7085%" y="191.50"></text></g><g><title>libcoretls.dylib`0x7ff8103dbafe (2,160 samples, 0.08%)</title><rect x="0.4248%" y="197" width="0.0776%" height="15" fill="rgb(216,164,2)" fg:x="11829" fg:w="2160"/><text x="0.6748%" y="207.50"></text></g><g><title>Security`0x7ff806d03af6 (2,174 samples, 0.08%)</title><rect x="0.4248%" y="213" width="0.0781%" height="15" fill="rgb(220,129,5)" fg:x="11829" fg:w="2174"/><text x="0.6748%" y="223.50"></text></g><g><title>Security`0x7ff806d039dd (4,996 samples, 0.18%)</title><rect x="0.3239%" y="229" width="0.1794%" height="15" fill="rgb(242,17,10)" fg:x="9020" fg:w="4996"/><text x="0.5739%" y="239.50"></text></g><g><title>Security`0x7ff806de04e9 (489 samples, 0.02%)</title><rect x="0.5054%" y="85" width="0.0176%" height="15" fill="rgb(242,107,0)" fg:x="14075" fg:w="489"/><text x="0.7554%" y="95.50"></text></g><g><title>Security`0x7ff806d92246 (490 samples, 0.02%)</title><rect x="0.5054%" y="101" width="0.0176%" height="15" fill="rgb(251,28,31)" fg:x="14075" fg:w="490"/><text x="0.7554%" y="111.50"></text></g><g><title>Security`0x7ff806de0128 (497 samples, 0.02%)</title><rect x="0.5052%" y="149" width="0.0178%" height="15" fill="rgb(233,223,10)" fg:x="14069" fg:w="497"/><text x="0.7552%" y="159.50"></text></g><g><title>libsystem_trace.dylib`0x7ff803e3aac9 (492 samples, 0.02%)</title><rect x="0.5054%" y="133" width="0.0177%" height="15" fill="rgb(215,21,27)" fg:x="14074" fg:w="492"/><text x="0.7554%" y="143.50"></text></g><g><title>Security`0x7ff806de026e (491 samples, 0.02%)</title><rect x="0.5054%" y="117" width="0.0176%" height="15" fill="rgb(232,23,21)" fg:x="14075" fg:w="491"/><text x="0.7554%" y="127.50"></text></g><g><title>comic-dl-tauri`security_framework::trust::SecTrust::evaluate_with_error (502 samples, 0.02%)</title><rect x="0.5051%" y="229" width="0.0180%" height="15" fill="rgb(244,5,23)" fg:x="14065" fg:w="502"/><text x="0.7551%" y="239.50"></text></g><g><title>Security`0x7ff806de17c0 (501 samples, 0.02%)</title><rect x="0.5051%" y="213" width="0.0180%" height="15" fill="rgb(226,81,46)" fg:x="14066" fg:w="501"/><text x="0.7551%" y="223.50"></text></g><g><title>Security`0x7ff806ddfeec (499 samples, 0.02%)</title><rect x="0.5052%" y="197" width="0.0179%" height="15" fill="rgb(247,70,30)" fg:x="14068" fg:w="499"/><text x="0.7552%" y="207.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (499 samples, 0.02%)</title><rect x="0.5052%" y="181" width="0.0179%" height="15" fill="rgb(212,68,19)" fg:x="14068" fg:w="499"/><text x="0.7552%" y="191.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (499 samples, 0.02%)</title><rect x="0.5052%" y="165" width="0.0179%" height="15" fill="rgb(240,187,13)" fg:x="14068" fg:w="499"/><text x="0.7552%" y="175.50"></text></g><g><title>comic-dl-tauri`&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (5,563 samples, 0.20%)</title><rect x="0.3235%" y="277" width="0.1998%" height="15" fill="rgb(223,113,26)" fg:x="9008" fg:w="5563"/><text x="0.5735%" y="287.50"></text></g><g><title>comic-dl-tauri`native_tls::MidHandshakeTlsStream&lt;S&gt;::handshake (5,558 samples, 0.20%)</title><rect x="0.3237%" y="261" width="0.1996%" height="15" fill="rgb(206,192,2)" fg:x="9013" fg:w="5558"/><text x="0.5737%" y="271.50"></text></g><g><title>comic-dl-tauri`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (5,555 samples, 0.20%)</title><rect x="0.3238%" y="245" width="0.1995%" height="15" fill="rgb(241,108,4)" fg:x="9016" fg:w="5555"/><text x="0.5738%" y="255.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (6,204 samples, 0.22%)</title><rect x="0.3091%" y="293" width="0.2228%" height="15" fill="rgb(247,173,49)" fg:x="8609" fg:w="6204"/><text x="0.5591%" y="303.50"></text></g><g><title>comic-dl-tauri`reqwest::connect::ConnectorService::connect_with_maybe_proxy::_{{closure}} (6,223 samples, 0.22%)</title><rect x="0.3089%" y="309" width="0.2235%" height="15" fill="rgb(224,114,35)" fg:x="8603" fg:w="6223"/><text x="0.5589%" y="319.50"></text></g><g><title>comic-dl-tauri`reqwest::connect::with_timeout::_{{closure}} (6,227 samples, 0.22%)</title><rect x="0.3088%" y="325" width="0.2236%" height="15" fill="rgb(245,159,27)" fg:x="8600" fg:w="6227"/><text x="0.5588%" y="335.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6,243 samples, 0.22%)</title><rect x="0.3083%" y="357" width="0.2242%" height="15" fill="rgb(245,172,44)" fg:x="8585" fg:w="6243"/><text x="0.5583%" y="367.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (6,242 samples, 0.22%)</title><rect x="0.3083%" y="341" width="0.2241%" height="15" fill="rgb(236,23,11)" fg:x="8586" fg:w="6242"/><text x="0.5583%" y="351.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6,271 samples, 0.23%)</title><rect x="0.3074%" y="373" width="0.2252%" height="15" fill="rgb(205,117,38)" fg:x="8560" fg:w="6271"/><text x="0.5574%" y="383.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (6,303 samples, 0.23%)</title><rect x="0.3063%" y="405" width="0.2263%" height="15" fill="rgb(237,72,25)" fg:x="8530" fg:w="6303"/><text x="0.5563%" y="415.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (6,299 samples, 0.23%)</title><rect x="0.3065%" y="389" width="0.2262%" height="15" fill="rgb(244,70,9)" fg:x="8534" fg:w="6299"/><text x="0.5565%" y="399.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (6,320 samples, 0.23%)</title><rect x="0.3058%" y="421" width="0.2269%" height="15" fill="rgb(217,125,39)" fg:x="8515" fg:w="6320"/><text x="0.5558%" y="431.50"></text></g><g><title>comic-dl-tauri`hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::_{{closure}} (6,392 samples, 0.23%)</title><rect x="0.3048%" y="437" width="0.2295%" height="15" fill="rgb(235,36,10)" fg:x="8488" fg:w="6392"/><text x="0.5548%" y="447.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (6,395 samples, 0.23%)</title><rect x="0.3047%" y="453" width="0.2296%" height="15" fill="rgb(251,123,47)" fg:x="8486" fg:w="6395"/><text x="0.5547%" y="463.50"></text></g><g><title>comic-dl-tauri`&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (6,410 samples, 0.23%)</title><rect x="0.3044%" y="485" width="0.2302%" height="15" fill="rgb(221,13,13)" fg:x="8477" fg:w="6410"/><text x="0.5544%" y="495.50"></text></g><g><title>comic-dl-tauri`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (6,406 samples, 0.23%)</title><rect x="0.3045%" y="469" width="0.2300%" height="15" fill="rgb(238,131,9)" fg:x="8481" fg:w="6406"/><text x="0.5545%" y="479.50"></text></g><g><title>comic-dl-tauri`system_configuration::dynamic_store::SCDynamicStore::get_proxies (289 samples, 0.01%)</title><rect x="0.5377%" y="453" width="0.0104%" height="15" fill="rgb(211,50,8)" fg:x="14974" fg:w="289"/><text x="0.7877%" y="463.50"></text></g><g><title>comic-dl-tauri`reqwest::proxy::Proxy::system (511 samples, 0.02%)</title><rect x="0.5366%" y="469" width="0.0183%" height="15" fill="rgb(245,182,24)" fg:x="14942" fg:w="511"/><text x="0.7866%" y="479.50"></text></g><g><title>comic-dl-tauri`reqwest::async_impl::client::ClientBuilder::build (524 samples, 0.02%)</title><rect x="0.5362%" y="485" width="0.0188%" height="15" fill="rgb(242,14,37)" fg:x="14931" fg:w="524"/><text x="0.7862%" y="495.50"></text></g><g><title>comic-dl-tauri`&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (7,003 samples, 0.25%)</title><rect x="0.3043%" y="501" width="0.2515%" height="15" fill="rgb(246,228,12)" fg:x="8474" fg:w="7003"/><text x="0.5543%" y="511.50"></text></g><g><title>comic-dl-tauri`image::dynimage::DynamicImage::to_rgb8 (3,083 samples, 0.11%)</title><rect x="0.5558%" y="501" width="0.1107%" height="15" fill="rgb(213,55,15)" fg:x="15479" fg:w="3083"/><text x="0.8058%" y="511.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::subblock_filter (393 samples, 0.01%)</title><rect x="0.6779%" y="421" width="0.0141%" height="15" fill="rgb(209,9,3)" fg:x="18878" fg:w="393"/><text x="0.9279%" y="431.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::Frame::fill_rgb (3,131 samples, 0.11%)</title><rect x="0.6954%" y="421" width="0.1124%" height="15" fill="rgb(230,59,30)" fg:x="19365" fg:w="3131"/><text x="0.9454%" y="431.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::common_adjust (619 samples, 0.02%)</title><rect x="1.0637%" y="405" width="0.0222%" height="15" fill="rgb(209,121,21)" fg:x="29622" fg:w="619"/><text x="1.3137%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::high_edge_variance (426 samples, 0.02%)</title><rect x="1.0859%" y="405" width="0.0153%" height="15" fill="rgb(220,109,13)" fg:x="30241" fg:w="426"/><text x="1.3359%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::high_edge_variance (999 samples, 0.04%)</title><rect x="1.3291%" y="389" width="0.0359%" height="15" fill="rgb(232,18,1)" fg:x="37011" fg:w="999"/><text x="1.5791%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::should_filter (5,515 samples, 0.20%)</title><rect x="1.3649%" y="389" width="0.1980%" height="15" fill="rgb(215,41,42)" fg:x="38010" fg:w="5515"/><text x="1.6149%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::simple_threshold (1,252 samples, 0.04%)</title><rect x="1.5180%" y="373" width="0.0450%" height="15" fill="rgb(224,123,36)" fg:x="42273" fg:w="1252"/><text x="1.7680%" y="383.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::macroblock_filter (12,993 samples, 0.47%)</title><rect x="1.1012%" y="405" width="0.4666%" height="15" fill="rgb(240,125,3)" fg:x="30667" fg:w="12993"/><text x="1.3512%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::should_filter (447 samples, 0.02%)</title><rect x="1.5678%" y="405" width="0.0161%" height="15" fill="rgb(205,98,50)" fg:x="43660" fg:w="447"/><text x="1.8178%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::common_adjust (3,465 samples, 0.12%)</title><rect x="1.7212%" y="389" width="0.1244%" height="15" fill="rgb(205,185,37)" fg:x="47931" fg:w="3465"/><text x="1.9712%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::high_edge_variance (1,755 samples, 0.06%)</title><rect x="1.8456%" y="389" width="0.0630%" height="15" fill="rgb(238,207,15)" fg:x="51396" fg:w="1755"/><text x="2.0956%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::should_filter (10,822 samples, 0.39%)</title><rect x="1.9086%" y="389" width="0.3886%" height="15" fill="rgb(213,199,42)" fg:x="53151" fg:w="10822"/><text x="2.1586%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::simple_threshold (2,635 samples, 0.09%)</title><rect x="2.2026%" y="373" width="0.0946%" height="15" fill="rgb(235,201,11)" fg:x="61338" fg:w="2635"/><text x="2.4526%" y="383.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::subblock_filter (20,157 samples, 0.72%)</title><rect x="1.5839%" y="405" width="0.7238%" height="15" fill="rgb(207,46,11)" fg:x="44107" fg:w="20157"/><text x="1.8339%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::loop_filter::simple_threshold (291 samples, 0.01%)</title><rect x="2.2972%" y="389" width="0.0104%" height="15" fill="rgb(241,35,35)" fg:x="63973" fg:w="291"/><text x="2.5472%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::transform::idct4x4 (2,396 samples, 0.09%)</title><rect x="2.3077%" y="405" width="0.0860%" height="15" fill="rgb(243,32,47)" fg:x="64264" fg:w="2396"/><text x="2.5577%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8_arithmetic_decoder::ArithmeticDecoder::read_bool (418 samples, 0.02%)</title><rect x="2.5591%" y="389" width="0.0150%" height="15" fill="rgb(247,202,23)" fg:x="71266" fg:w="418"/><text x="2.8091%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8_arithmetic_decoder::ArithmeticDecoder::read_flag (2,440 samples, 0.09%)</title><rect x="2.5741%" y="389" width="0.0876%" height="15" fill="rgb(219,102,11)" fg:x="71684" fg:w="2440"/><text x="2.8241%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::Vp8Decoder&lt;R&gt;::read_coefficients (26,649 samples, 0.96%)</title><rect x="2.4033%" y="405" width="0.9570%" height="15" fill="rgb(243,110,44)" fg:x="66927" fg:w="26649"/><text x="2.6533%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8_arithmetic_decoder::ArithmeticDecoder::read_with_tree_with_first_node (19,452 samples, 0.70%)</title><rect x="2.6618%" y="389" width="0.6985%" height="15" fill="rgb(222,74,54)" fg:x="74124" fg:w="19452"/><text x="2.9118%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::add_residue (534 samples, 0.02%)</title><rect x="3.3621%" y="405" width="0.0192%" height="15" fill="rgb(216,99,12)" fg:x="93628" fg:w="534"/><text x="3.6121%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::add_residue (517 samples, 0.02%)</title><rect x="3.4683%" y="389" width="0.0186%" height="15" fill="rgb(226,22,26)" fg:x="96583" fg:w="517"/><text x="3.7183%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::predict_4x4 (3,198 samples, 0.11%)</title><rect x="3.3922%" y="405" width="0.1148%" height="15" fill="rgb(217,163,10)" fg:x="94466" fg:w="3198"/><text x="3.6422%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::predict_tmpred (459 samples, 0.02%)</title><rect x="3.4906%" y="389" width="0.0165%" height="15" fill="rgb(213,25,53)" fg:x="97205" fg:w="459"/><text x="3.7406%" y="399.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::predict_dcpred (738 samples, 0.03%)</title><rect x="3.5071%" y="405" width="0.0265%" height="15" fill="rgb(252,105,26)" fg:x="97664" fg:w="738"/><text x="3.7571%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8_arithmetic_decoder::ArithmeticDecoder::read_with_tree_with_first_node (2,876 samples, 0.10%)</title><rect x="3.5491%" y="405" width="0.1033%" height="15" fill="rgb(220,39,43)" fg:x="98835" fg:w="2876"/><text x="3.7991%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (298 samples, 0.01%)</title><rect x="3.6557%" y="405" width="0.0107%" height="15" fill="rgb(229,68,48)" fg:x="101802" fg:w="298"/><text x="3.9057%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (688 samples, 0.02%)</title><rect x="3.6664%" y="405" width="0.0247%" height="15" fill="rgb(252,8,32)" fg:x="102100" fg:w="688"/><text x="3.9164%" y="415.50"></text></g><g><title>comic-dl-tauri`image_webp::vp8::Vp8Decoder&lt;R&gt;::decode_frame_ (80,378 samples, 2.89%)</title><rect x="0.8078%" y="421" width="2.8863%" height="15" fill="rgb(223,20,43)" fg:x="22496" fg:w="80378"/><text x="1.0578%" y="431.50">co..</text></g><g><title>comic-dl-tauri`&lt;image::codecs::webp::decoder::WebPDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image_boxed (84,555 samples, 3.04%)</title><rect x="0.6669%" y="437" width="3.0363%" height="15" fill="rgb(229,81,49)" fg:x="18571" fg:w="84555"/><text x="0.9169%" y="447.50">com..</text></g><g><title>comic-dl-tauri`image::image::decoder_to_vec (84,896 samples, 3.05%)</title><rect x="0.6669%" y="453" width="3.0486%" height="15" fill="rgb(236,28,36)" fg:x="18571" fg:w="84896"/><text x="0.9169%" y="463.50">com..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (340 samples, 0.01%)</title><rect x="3.7033%" y="437" width="0.0122%" height="15" fill="rgb(249,185,26)" fg:x="103127" fg:w="340"/><text x="3.9533%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (340 samples, 0.01%)</title><rect x="3.7033%" y="421" width="0.0122%" height="15" fill="rgb(249,174,33)" fg:x="103127" fg:w="340"/><text x="3.9533%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (335 samples, 0.01%)</title><rect x="3.7034%" y="405" width="0.0120%" height="15" fill="rgb(233,201,37)" fg:x="103132" fg:w="335"/><text x="3.9534%" y="415.50"></text></g><g><title>comic-dl-tauri`image::dynimage::decoder_to_image (84,899 samples, 3.05%)</title><rect x="0.6668%" y="469" width="3.0487%" height="15" fill="rgb(221,78,26)" fg:x="18569" fg:w="84899"/><text x="0.9168%" y="479.50">com..</text></g><g><title>comic-dl-tauri`image::dynimage::load_from_memory (84,908 samples, 3.05%)</title><rect x="0.6666%" y="501" width="3.0490%" height="15" fill="rgb(250,127,30)" fg:x="18562" fg:w="84908"/><text x="0.9166%" y="511.50">com..</text></g><g><title>comic-dl-tauri`image::image_reader::image_reader_type::ImageReader&lt;R&gt;::decode (84,908 samples, 3.05%)</title><rect x="0.6666%" y="485" width="3.0490%" height="15" fill="rgb(230,49,44)" fg:x="18562" fg:w="84908"/><text x="0.9166%" y="495.50">com..</text></g><g><title>comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_segment (333 samples, 0.01%)</title><rect x="3.7179%" y="469" width="0.0120%" height="15" fill="rgb(229,67,23)" fg:x="103536" fg:w="333"/><text x="3.9679%" y="479.50"></text></g><g><title>comic-dl-tauri`std::io::Write::write_all (333 samples, 0.01%)</title><rect x="3.7179%" y="453" width="0.0120%" height="15" fill="rgb(249,83,47)" fg:x="103536" fg:w="333"/><text x="3.9679%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`write (333 samples, 0.01%)</title><rect x="3.7179%" y="437" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="103536" fg:w="333"/><text x="3.9679%" y="447.50"></text></g><g><title>comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::huffman_encode (391 samples, 0.01%)</title><rect x="4.8755%" y="453" width="0.0140%" height="15" fill="rgb(238,154,13)" fg:x="135771" fg:w="391"/><text x="5.1255%" y="463.50"></text></g><g><title>comic-dl-tauri`&lt;std::fs::File as std::io::Write&gt;::write (366 samples, 0.01%)</title><rect x="5.5400%" y="437" width="0.0131%" height="15" fill="rgb(219,56,2)" fg:x="154275" fg:w="366"/><text x="5.7900%" y="447.50"></text></g><g><title>comic-dl-tauri`&lt;std::fs::File as std::io::Write&gt;::write (555 samples, 0.02%)</title><rect x="5.8191%" y="421" width="0.0199%" height="15" fill="rgb(233,0,4)" fg:x="162049" fg:w="555"/><text x="6.0691%" y="431.50"></text></g><g><title>comic-dl-tauri`&lt;std::fs::File as std::io::Write&gt;::write (5,590 samples, 0.20%)</title><rect x="5.9866%" y="405" width="0.2007%" height="15" fill="rgb(235,30,7)" fg:x="166713" fg:w="5590"/><text x="6.2366%" y="415.50"></text></g><g><title>comic-dl-tauri`DYLD-STUB$$write (307 samples, 0.01%)</title><rect x="6.1873%" y="405" width="0.0110%" height="15" fill="rgb(250,79,13)" fg:x="172303" fg:w="307"/><text x="6.4373%" y="415.50"></text></g><g><title>comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::huffman_encode (1,700,552 samples, 61.07%)</title><rect x="5.5531%" y="437" width="61.0662%" height="15" fill="rgb(211,146,34)" fg:x="154641" fg:w="1700552"/><text x="5.8031%" y="447.50">comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::huffman_encode</text></g><g><title>comic-dl-tauri`std::io::Write::write_all (1,692,589 samples, 60.78%)</title><rect x="5.8391%" y="421" width="60.7803%" height="15" fill="rgb(228,22,38)" fg:x="162604" fg:w="1692589"/><text x="6.0891%" y="431.50">comic-dl-tauri`std::io::Write::write_all</text></g><g><title>libsystem_kernel.dylib`write (1,682,583 samples, 60.42%)</title><rect x="6.1984%" y="405" width="60.4210%" height="15" fill="rgb(235,168,5)" fg:x="172610" fg:w="1682583"/><text x="6.4484%" y="415.50">libsystem_kernel.dylib`write</text></g><g><title>comic-dl-tauri`&lt;std::fs::File as std::io::Write&gt;::write (3,075 samples, 0.11%)</title><rect x="66.7041%" y="421" width="0.1104%" height="15" fill="rgb(221,155,16)" fg:x="1857553" fg:w="3075"/><text x="66.9541%" y="431.50"></text></g><g><title>comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block (2,632,275 samples, 94.52%)</title><rect x="4.8895%" y="453" width="94.5241%" height="15" fill="rgb(215,215,53)" fg:x="136162" fg:w="2632275"/><text x="5.1395%" y="463.50">comic-dl-tauri`image::codecs::jpeg::encoder::BitWriter&lt;W&gt;::write_block</text></g><g><title>comic-dl-tauri`std::io::Write::write_all (913,244 samples, 32.79%)</title><rect x="66.6193%" y="437" width="32.7943%" height="15" fill="rgb(223,4,10)" fg:x="1855193" fg:w="913244"/><text x="66.8693%" y="447.50">comic-dl-tauri`std::io::Write::write_all</text></g><g><title>libsystem_kernel.dylib`write (907,633 samples, 32.59%)</title><rect x="66.8208%" y="421" width="32.5928%" height="15" fill="rgb(234,103,6)" fg:x="1860804" fg:w="907633"/><text x="67.0708%" y="431.50">libsystem_kernel.dylib`write</text></g><g><title>comic-dl-tauri`image::codecs::jpeg::transform::fdct (6,750 samples, 0.24%)</title><rect x="99.4136%" y="453" width="0.2424%" height="15" fill="rgb(227,97,0)" fg:x="2768437" fg:w="6750"/><text x="99.6636%" y="463.50"></text></g><g><title>comic-dl-tauri`image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt;::encode_rgb (2,671,576 samples, 95.94%)</title><rect x="3.7299%" y="469" width="95.9354%" height="15" fill="rgb(234,150,53)" fg:x="103869" fg:w="2671576"/><text x="3.9799%" y="479.50">comic-dl-tauri`image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt;::encode_rgb</text></g><g><title>comic-dl-tauri`std::io::Write::write_all (579 samples, 0.02%)</title><rect x="99.6707%" y="469" width="0.0208%" height="15" fill="rgb(228,201,54)" fg:x="2775598" fg:w="579"/><text x="99.9207%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`write (577 samples, 0.02%)</title><rect x="99.6708%" y="453" width="0.0207%" height="15" fill="rgb(222,22,37)" fg:x="2775600" fg:w="577"/><text x="99.9208%" y="463.50"></text></g><g><title>comic-dl-tauri`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (2,672,707 samples, 95.98%)</title><rect x="3.7156%" y="485" width="95.9760%" height="15" fill="rgb(237,53,32)" fg:x="103471" fg:w="2672707"/><text x="3.9656%" y="495.50">comic-dl-tauri`&lt;image::codecs::jpeg::encoder::JpegEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image</text></g><g><title>comic-dl-tauri`image::dynimage::write_buffer_with_format (2,672,717 samples, 95.98%)</title><rect x="3.7156%" y="501" width="95.9763%" height="15" fill="rgb(233,25,53)" fg:x="103470" fg:w="2672717"/><text x="3.9656%" y="511.50">comic-dl-tauri`image::dynimage::write_buffer_with_format</text></g><g><title>comic-dl-tauri`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (321 samples, 0.01%)</title><rect x="99.6946%" y="389" width="0.0115%" height="15" fill="rgb(210,40,34)" fg:x="2776263" fg:w="321"/><text x="99.9446%" y="399.50"></text></g><g><title>comic-dl-tauri`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (337 samples, 0.01%)</title><rect x="99.6945%" y="405" width="0.0121%" height="15" fill="rgb(241,220,44)" fg:x="2776259" fg:w="337"/><text x="99.9445%" y="415.50"></text></g><g><title>comic-dl-tauri`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (374 samples, 0.01%)</title><rect x="99.6933%" y="437" width="0.0134%" height="15" fill="rgb(235,28,35)" fg:x="2776226" fg:w="374"/><text x="99.9433%" y="447.50"></text></g><g><title>comic-dl-tauri`&lt;hyper::body::incoming::Incoming as http_body::Body&gt;::poll_frame (362 samples, 0.01%)</title><rect x="99.6937%" y="421" width="0.0130%" height="15" fill="rgb(210,56,17)" fg:x="2776238" fg:w="362"/><text x="99.9437%" y="431.50"></text></g><g><title>comic-dl-tauri`&lt;reqwest::async_impl::decoder::Decoder as http_body::Body&gt;::poll_frame (394 samples, 0.01%)</title><rect x="99.6929%" y="469" width="0.0141%" height="15" fill="rgb(224,130,29)" fg:x="2776214" fg:w="394"/><text x="99.9429%" y="479.50"></text></g><g><title>comic-dl-tauri`&lt;http_body_util::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::poll_frame (390 samples, 0.01%)</title><rect x="99.6930%" y="453" width="0.0140%" height="15" fill="rgb(235,212,8)" fg:x="2776218" fg:w="390"/><text x="99.9430%" y="463.50"></text></g><g><title>comic-dl-tauri`&lt;http_body_util::combinators::collect::Collect&lt;T&gt; as core::future::future::Future&gt;::poll (449 samples, 0.02%)</title><rect x="99.6922%" y="485" width="0.0161%" height="15" fill="rgb(223,33,50)" fg:x="2776196" fg:w="449"/><text x="99.9422%" y="495.50"></text></g><g><title>comic-dl-tauri`reqwest::async_impl::response::Response::bytes::_{{closure}} (581 samples, 0.02%)</title><rect x="99.6920%" y="501" width="0.0209%" height="15" fill="rgb(219,149,13)" fg:x="2776189" fg:w="581"/><text x="99.9420%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__open (371 samples, 0.01%)</title><rect x="99.7128%" y="485" width="0.0133%" height="15" fill="rgb(250,156,29)" fg:x="2776770" fg:w="371"/><text x="99.9628%" y="495.50"></text></g><g><title>comic-dl-tauri`std::fs::OpenOptions::_open (372 samples, 0.01%)</title><rect x="99.7128%" y="501" width="0.0134%" height="15" fill="rgb(216,193,19)" fg:x="2776770" fg:w="372"/><text x="99.9628%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (492 samples, 0.02%)</title><rect x="99.7266%" y="501" width="0.0177%" height="15" fill="rgb(216,135,14)" fg:x="2777153" fg:w="492"/><text x="99.9766%" y="511.50"></text></g><g><title>comic-dl-tauri`comic_dl_tauri_lib::download_single_image::_{{closure}} (2,769,209 samples, 99.44%)</title><rect x="0.3030%" y="517" width="99.4413%" height="15" fill="rgb(241,47,5)" fg:x="8438" fg:w="2769209"/><text x="0.5530%" y="527.50">comic-dl-tauri`comic_dl_tauri_lib::download_single_image::_{{closure}}</text></g><g><title>comic-dl-tauri`sqlite3BtreeCommitPhaseOne (497 samples, 0.02%)</title><rect x="99.7539%" y="389" width="0.0178%" height="15" fill="rgb(233,42,35)" fg:x="2777913" fg:w="497"/><text x="100.0039%" y="399.50"></text></g><g><title>comic-dl-tauri`sqlite3PagerCommitPhaseOne (497 samples, 0.02%)</title><rect x="99.7539%" y="373" width="0.0178%" height="15" fill="rgb(231,13,6)" fg:x="2777913" fg:w="497"/><text x="100.0039%" y="383.50"></text></g><g><title>comic-dl-tauri`sqlite3VdbeHalt (611 samples, 0.02%)</title><rect x="99.7537%" y="421" width="0.0219%" height="15" fill="rgb(207,181,40)" fg:x="2777909" fg:w="611"/><text x="100.0037%" y="431.50"></text></g><g><title>comic-dl-tauri`vdbeCommit (608 samples, 0.02%)</title><rect x="99.7538%" y="405" width="0.0218%" height="15" fill="rgb(254,173,49)" fg:x="2777912" fg:w="608"/><text x="100.0038%" y="415.50"></text></g><g><title>comic-dl-tauri`comic_dl_tauri_lib::db::update_download_task_progress (862 samples, 0.03%)</title><rect x="99.7451%" y="501" width="0.0310%" height="15" fill="rgb(221,1,38)" fg:x="2777669" fg:w="862"/><text x="99.9951%" y="511.50"></text></g><g><title>comic-dl-tauri`&lt;diesel::sqlite::connection::SqliteConnection as diesel::connection::Connection&gt;::execute_returning_count (862 samples, 0.03%)</title><rect x="99.7451%" y="485" width="0.0310%" height="15" fill="rgb(206,124,46)" fg:x="2777669" fg:w="862"/><text x="99.9951%" y="495.50"></text></g><g><title>comic-dl-tauri`diesel::sqlite::connection::stmt::StatementUse::run (851 samples, 0.03%)</title><rect x="99.7455%" y="469" width="0.0306%" height="15" fill="rgb(249,21,11)" fg:x="2777680" fg:w="851"/><text x="99.9955%" y="479.50"></text></g><g><title>comic-dl-tauri`sqlite3_step (851 samples, 0.03%)</title><rect x="99.7455%" y="453" width="0.0306%" height="15" fill="rgb(222,201,40)" fg:x="2777680" fg:w="851"/><text x="99.9955%" y="463.50"></text></g><g><title>comic-dl-tauri`sqlite3VdbeExec (851 samples, 0.03%)</title><rect x="99.7455%" y="437" width="0.0306%" height="15" fill="rgb(235,61,29)" fg:x="2777680" fg:w="851"/><text x="99.9955%" y="447.50"></text></g><g><title>comic-dl-tauri`comic_dl_tauri_lib::run_join_set_juanhuafanwai::_{{closure}} (1,152 samples, 0.04%)</title><rect x="99.7443%" y="517" width="0.0414%" height="15" fill="rgb(219,207,3)" fg:x="2777647" fg:w="1152"/><text x="99.9943%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (510 samples, 0.02%)</title><rect x="99.7874%" y="517" width="0.0183%" height="15" fill="rgb(222,56,46)" fg:x="2778847" fg:w="510"/><text x="100.0374%" y="527.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,770,927 samples, 99.50%)</title><rect x="0.3029%" y="533" width="99.5030%" height="15" fill="rgb(239,76,54)" fg:x="8434" fg:w="2770927"/><text x="0.5529%" y="543.50">comic-dl-tauri`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>comic-dl-tauri`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,770,948 samples, 99.50%)</title><rect x="0.3024%" y="549" width="99.5038%" height="15" fill="rgb(231,124,27)" fg:x="8422" fg:w="2770948"/><text x="0.5524%" y="559.50">comic-dl-tauri`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>comic-dl-tauri`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (439 samples, 0.02%)</title><rect x="99.8429%" y="277" width="0.0158%" height="15" fill="rgb(249,195,6)" fg:x="2780391" fg:w="439"/><text x="100.0929%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (427 samples, 0.02%)</title><rect x="99.8433%" y="261" width="0.0153%" height="15" fill="rgb(237,174,47)" fg:x="2780403" fg:w="427"/><text x="100.0933%" y="271.50"></text></g><g><title>comic-dl-tauri`tokio::net::tcp::stream::TcpStream::poll_read_priv (454 samples, 0.02%)</title><rect x="99.8426%" y="293" width="0.0163%" height="15" fill="rgb(206,201,31)" fg:x="2780384" fg:w="454"/><text x="100.0926%" y="303.50"></text></g><g><title>comic-dl-tauri`security_framework::secure_transport::read_func (470 samples, 0.02%)</title><rect x="99.8421%" y="341" width="0.0169%" height="15" fill="rgb(231,57,52)" fg:x="2780370" fg:w="470"/><text x="100.0921%" y="351.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (467 samples, 0.02%)</title><rect x="99.8422%" y="325" width="0.0168%" height="15" fill="rgb(248,177,22)" fg:x="2780373" fg:w="467"/><text x="100.0922%" y="335.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (464 samples, 0.02%)</title><rect x="99.8423%" y="309" width="0.0167%" height="15" fill="rgb(215,211,37)" fg:x="2780376" fg:w="464"/><text x="100.0923%" y="319.50"></text></g><g><title>Security`0x7ff806f6911c (473 samples, 0.02%)</title><rect x="99.8420%" y="357" width="0.0170%" height="15" fill="rgb(241,128,51)" fg:x="2780368" fg:w="473"/><text x="100.0920%" y="367.50"></text></g><g><title>comic-dl-tauri`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (2,378 samples, 0.09%)</title><rect x="99.8613%" y="277" width="0.0854%" height="15" fill="rgb(227,165,31)" fg:x="2780905" fg:w="2378"/><text x="100.1113%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (2,356 samples, 0.08%)</title><rect x="99.8621%" y="261" width="0.0846%" height="15" fill="rgb(228,167,24)" fg:x="2780927" fg:w="2356"/><text x="100.1121%" y="271.50"></text></g><g><title>comic-dl-tauri`tokio::net::tcp::stream::TcpStream::poll_read_priv (2,439 samples, 0.09%)</title><rect x="99.8609%" y="293" width="0.0876%" height="15" fill="rgb(228,143,12)" fg:x="2780892" fg:w="2439"/><text x="100.1109%" y="303.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (2,449 samples, 0.09%)</title><rect x="99.8606%" y="309" width="0.0879%" height="15" fill="rgb(249,149,8)" fg:x="2780884" fg:w="2449"/><text x="100.1106%" y="319.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (2,461 samples, 0.09%)</title><rect x="99.8604%" y="325" width="0.0884%" height="15" fill="rgb(243,35,44)" fg:x="2780880" fg:w="2461"/><text x="100.1104%" y="335.50"></text></g><g><title>comic-dl-tauri`security_framework::secure_transport::read_func (2,478 samples, 0.09%)</title><rect x="99.8599%" y="341" width="0.0890%" height="15" fill="rgb(246,89,9)" fg:x="2780866" fg:w="2478"/><text x="100.1099%" y="351.50"></text></g><g><title>Security`0x7ff806f691b6 (2,486 samples, 0.09%)</title><rect x="99.8598%" y="357" width="0.0893%" height="15" fill="rgb(233,213,13)" fg:x="2780862" fg:w="2486"/><text x="100.1098%" y="367.50"></text></g><g><title>Security`0x7ff806f69294 (429 samples, 0.02%)</title><rect x="99.9517%" y="357" width="0.0154%" height="15" fill="rgb(233,141,41)" fg:x="2783423" fg:w="429"/><text x="100.2017%" y="367.50"></text></g><g><title>Security`0x7ff806d07682 (3,537 samples, 0.13%)</title><rect x="99.8416%" y="373" width="0.1270%" height="15" fill="rgb(239,167,4)" fg:x="2780357" fg:w="3537"/><text x="100.0916%" y="383.50"></text></g><g><title>comic-dl-tauri`&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (3,720 samples, 0.13%)</title><rect x="99.8403%" y="389" width="0.1336%" height="15" fill="rgb(209,217,16)" fg:x="2780319" fg:w="3720"/><text x="100.0903%" y="399.50"></text></g><g><title>comic-dl-tauri`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (3,911 samples, 0.14%)</title><rect x="99.8387%" y="405" width="0.1404%" height="15" fill="rgb(219,88,35)" fg:x="2780275" fg:w="3911"/><text x="100.0887%" y="415.50"></text></g><g><title>comic-dl-tauri`&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (3,943 samples, 0.14%)</title><rect x="99.8381%" y="421" width="0.1416%" height="15" fill="rgb(220,193,23)" fg:x="2780258" fg:w="3943"/><text x="100.0881%" y="431.50"></text></g><g><title>comic-dl-tauri`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4,057 samples, 0.15%)</title><rect x="99.8374%" y="437" width="0.1457%" height="15" fill="rgb(230,90,52)" fg:x="2780238" fg:w="4057"/><text x="100.0874%" y="447.50"></text></g><g><title>comic-dl-tauri`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (4,141 samples, 0.15%)</title><rect x="99.8348%" y="453" width="0.1487%" height="15" fill="rgb(252,106,19)" fg:x="2780167" fg:w="4141"/><text x="100.0848%" y="463.50"></text></g><g><title>comic-dl-tauri`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (4,204 samples, 0.15%)</title><rect x="99.8329%" y="485" width="0.1510%" height="15" fill="rgb(206,74,20)" fg:x="2780115" fg:w="4204"/><text x="100.0829%" y="495.50"></text></g><g><title>comic-dl-tauri`hyper::proto::h1::decode::Decoder::decode (4,168 samples, 0.15%)</title><rect x="99.8342%" y="469" width="0.1497%" height="15" fill="rgb(230,138,44)" fg:x="2780151" fg:w="4168"/><text x="100.0842%" y="479.50"></text></g><g><title>comic-dl-tauri`hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4,909 samples, 0.18%)</title><rect x="99.8172%" y="501" width="0.1763%" height="15" fill="rgb(235,182,43)" fg:x="2779676" fg:w="4909"/><text x="100.0672%" y="511.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,192 samples, 0.19%)</title><rect x="99.8071%" y="517" width="0.1864%" height="15" fill="rgb(242,16,51)" fg:x="2779394" fg:w="5192"/><text x="100.0571%" y="527.50"></text></g><g><title>comic-dl-tauri`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,211 samples, 0.19%)</title><rect x="99.8065%" y="533" width="0.1871%" height="15" fill="rgb(248,9,4)" fg:x="2779379" fg:w="5211"/><text x="100.0565%" y="543.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::task::raw::poll (5,262 samples, 0.19%)</title><rect x="99.8062%" y="549" width="0.1890%" height="15" fill="rgb(210,31,22)" fg:x="2779370" fg:w="5262"/><text x="100.0562%" y="559.50"></text></g><g><title>comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (2,776,322 samples, 99.70%)</title><rect x="0.2987%" y="565" width="99.6967%" height="15" fill="rgb(239,54,39)" fg:x="8317" fg:w="2776322"/><text x="0.5487%" y="575.50">comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::Context::run (2,779,645 samples, 99.82%)</title><rect x="0.1809%" y="581" width="99.8161%" height="15" fill="rgb(230,99,41)" fg:x="5039" fg:w="2779645"/><text x="0.4309%" y="591.50">comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::run (2,779,729 samples, 99.82%)</title><rect x="0.1801%" y="613" width="99.8191%" height="15" fill="rgb(253,106,12)" fg:x="5014" fg:w="2779729"/><text x="0.4301%" y="623.50">comic-dl-tauri`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>comic-dl-tauri`tokio::runtime::context::runtime::enter_runtime (2,779,729 samples, 99.82%)</title><rect x="0.1801%" y="597" width="99.8191%" height="15" fill="rgb(213,46,41)" fg:x="5014" fg:w="2779729"/><text x="0.4301%" y="607.50">comic-dl-tauri`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>comic-dl-tauri`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,781,072 samples, 99.87%)</title><rect x="0.1319%" y="645" width="99.8673%" height="15" fill="rgb(215,133,35)" fg:x="3673" fg:w="2781072"/><text x="0.3819%" y="655.50">comic-dl-tauri`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>comic-dl-tauri`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,781,072 samples, 99.87%)</title><rect x="0.1319%" y="629" width="99.8673%" height="15" fill="rgb(213,28,5)" fg:x="3673" fg:w="2781072"/><text x="0.3819%" y="639.50">comic-dl-tauri`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>comic-dl-tauri`std::sys::backtrace::__rust_begin_short_backtrace (2,781,113 samples, 99.87%)</title><rect x="0.1308%" y="693" width="99.8688%" height="15" fill="rgb(215,77,49)" fg:x="3643" fg:w="2781113"/><text x="0.3808%" y="703.50">comic-dl-tauri`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>comic-dl-tauri`tokio::runtime::blocking::pool::Inner::run (2,781,112 samples, 99.87%)</title><rect x="0.1309%" y="677" width="99.8688%" height="15" fill="rgb(248,100,22)" fg:x="3644" fg:w="2781112"/><text x="0.3809%" y="687.50">comic-dl-tauri`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>comic-dl-tauri`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,781,084 samples, 99.87%)</title><rect x="0.1319%" y="661" width="99.8677%" height="15" fill="rgb(208,67,9)" fg:x="3672" fg:w="2781084"/><text x="0.3819%" y="671.50">comic-dl-tauri`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>comic-dl-tauri`core::ops::function::FnOnce::call_once{{vtable.shim}} (2,781,114 samples, 99.87%)</title><rect x="0.1308%" y="709" width="99.8688%" height="15" fill="rgb(219,133,21)" fg:x="3643" fg:w="2781114"/><text x="0.3808%" y="719.50">comic-dl-tauri`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>comic-dl-tauri`std::sys::pal::unix::thread::Thread::new::thread_start (2,781,115 samples, 99.87%)</title><rect x="0.1308%" y="725" width="99.8689%" height="15" fill="rgb(246,46,29)" fg:x="3643" fg:w="2781115"/><text x="0.3808%" y="735.50">comic-dl-tauri`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (2,784,767 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="2784767"/><text x="0.2500%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (2,781,999 samples, 99.90%)</title><rect x="0.0994%" y="757" width="99.9006%" height="15" fill="rgb(252,136,11)" fg:x="2768" fg:w="2781999"/><text x="0.3494%" y="767.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (2,781,993 samples, 99.90%)</title><rect x="0.0996%" y="741" width="99.9004%" height="15" fill="rgb(219,138,53)" fg:x="2774" fg:w="2781993"/><text x="0.3496%" y="751.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>